# Generated by Django 3.2.7 on 2022-02-12 13:01

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import apps.core.validators.username_validator


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='last update time')),
                ('about', models.CharField(blank=True, max_length=1000, null=True)),
                ('address', models.CharField(blank=True, max_length=250, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('email', models.EmailField(blank=True, error_messages={'blank': 'Enter a valid email address.', 'invalid': 'Enter a valid email address.', 'unique': 'Email is invalid or already taken.'}, max_length=255, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(blank=True, max_length=50, validators=[django.core.validators.MinLengthValidator(3)], verbose_name='first name')),
                ('headline', models.CharField(blank=True, max_length=250, null=True)),
                ('is_active', models.BooleanField(blank=True, default=False, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('last_name', models.CharField(blank=True, max_length=50, validators=[django.core.validators.MinLengthValidator(3)], verbose_name='last name')),
                ('password', models.CharField(blank=True, max_length=128, verbose_name='password')),
                ('username', models.CharField(blank=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 3 to 30 characters. Letters (a-z), digits (0-9) and underscore (_) only.', max_length=30, unique=True, validators=[django.core.validators.MinLengthValidator(1), apps.core.validators.username_validator.UsernameValidator()], verbose_name='username')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ConfirmationKey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='last update time')),
                ('key', models.CharField(blank=True, max_length=255, unique=True, validators=[django.core.validators.MinLengthValidator(4)], verbose_name='key')),
                ('expires_at', models.DateTimeField(verbose_name='key expiry')),
            ],
            options={
                'verbose_name': 'confirmation key',
                'verbose_name_plural': 'confirmation keys',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='last update time')),
                ('id', models.SmallAutoField(primary_key=True, serialize=False)),
                ('iso_3166_1_alpha_2_code', models.CharField(blank=True, max_length=2, unique=True)),
                ('iso_3166_1_alpha_3_code', models.CharField(blank=True, max_length=3, unique=True)),
                ('iso_3166_1_numeric_code', models.CharField(blank=True, max_length=10, unique=True)),
                ('name', models.CharField(blank=True, max_length=150, unique=True)),
                ('formal_name', models.CharField(blank=True, max_length=150, unique=True)),
            ],
            options={
                'verbose_name': 'country',
                'verbose_name_plural': 'countries',
            },
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='last update time')),
                ('id', models.SmallAutoField(primary_key=True, serialize=False)),
                ('iso_4217_code', models.CharField(blank=True, max_length=3, unique=True)),
                ('iso_4217_numeric_code', models.CharField(blank=True, max_length=10, unique=True)),
                ('name', models.CharField(blank=True, max_length=100, unique=True)),
                ('symbol', models.CharField(blank=True, max_length=20)),
            ],
            options={
                'verbose_name': 'currency',
                'verbose_name_plural': 'currencies',
            },
        ),
        migrations.CreateModel(
            name='Gender',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='last update time')),
                ('id', models.SmallAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'gender',
                'verbose_name_plural': 'genders',
            },
        ),
        migrations.CreateModel(
            name='SupportedLocale',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='last update time')),
                ('id', models.SmallAutoField(primary_key=True, serialize=False)),
                ('locale_tag', models.CharField(blank=True, max_length=20, unique=True)),
                ('iso_639_1_code', models.CharField(blank=True, max_length=2)),
                ('iso_639_2_code', models.CharField(blank=True, max_length=3)),
                ('name', models.CharField(blank=True, max_length=150, unique=True)),
                ('native_name', models.CharField(blank=True, max_length=150, unique=True)),
            ],
            options={
                'verbose_name': 'supported locale',
                'verbose_name_plural': 'supported locales',
            },
        ),
        migrations.CreateModel(
            name='TimeZone',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='last update time')),
                ('id', models.SmallAutoField(primary_key=True, serialize=False)),
                ('abbreviation', models.CharField(blank=True, db_index=True, max_length=20)),
                ('name', models.CharField(blank=True, max_length=150, unique=True)),
                ('offset_display_text', models.CharField(blank=True, max_length=20)),
                ('offset_text', models.CharField(blank=True, max_length=20)),
                ('offset_text_clean', models.CharField(blank=True, db_index=True, max_length=20)),
                ('offset_minutes', models.SmallIntegerField(blank=True)),
            ],
            options={
                'verbose_name': 'time_zone',
                'verbose_name_plural': 'time_zones',
                'ordering': ('offset_minutes',),
            },
        ),
        migrations.CreateModel(
            name='UserEmail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='last update time')),
                ('email', models.EmailField(blank=True, max_length=255, unique=True, verbose_name='email address')),
                ('is_verified', models.BooleanField(blank=True, default=False, verbose_name='verified or not')),
                ('confirmation_key', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_email', to='core.confirmationkey')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user email',
                'verbose_name_plural': 'user emails',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='country',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_set', to='core.country'),
        ),
        migrations.AddField(
            model_name='user',
            name='gender',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_set', to='core.gender'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
